
/*
Auto-generated by CVXPYgen on March 07, 2024 at 19:14:03.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.max_effort) {
        cpg_update_max_effort(CPG_Params_cpp.max_effort);
    }
    if (CPG_Updated_cpp.thrust_mat) {
        for(i=0; i<12; i++) {
            cpg_update_thrust_mat(i, CPG_Params_cpp.thrust_mat[i]);
        }
    }
    if (CPG_Updated_cpp.moment) {
        for(i=0; i<3; i++) {
            cpg_update_moment(i, CPG_Params_cpp.moment[i]);
        }
    }

    // Solve
    std::clock_t ASA_start = std::clock();
    cpg_solve();
    std::clock_t ASA_end = std::clock();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<4; i++) {
        CPG_Prim_cpp.activation[i] = CPG_Prim.activation[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<3; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    CPG_Info_cpp.time = 1.0 * (ASA_end - ASA_start) / CLOCKS_PER_SEC;
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("max_effort", &CPG_Params_cpp_t::max_effort)
            .def_readwrite("thrust_mat", &CPG_Params_cpp_t::thrust_mat)
            .def_readwrite("moment", &CPG_Params_cpp_t::moment)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("max_effort", &CPG_Updated_cpp_t::max_effort)
            .def_readwrite("thrust_mat", &CPG_Updated_cpp_t::thrust_mat)
            .def_readwrite("moment", &CPG_Updated_cpp_t::moment)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("activation", &CPG_Prim_cpp_t::activation)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_feastol", &cpg_set_solver_feastol);
    m.def("set_solver_abstol", &cpg_set_solver_abstol);
    m.def("set_solver_reltol", &cpg_set_solver_reltol);
    m.def("set_solver_feastol_inacc", &cpg_set_solver_feastol_inacc);
    m.def("set_solver_abstol_inacc", &cpg_set_solver_abstol_inacc);
    m.def("set_solver_reltol_inacc", &cpg_set_solver_reltol_inacc);
    m.def("set_solver_maxit", &cpg_set_solver_maxit);

}
